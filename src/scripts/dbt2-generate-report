#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2006      Open Source Development Labs, Inc.
#               2014      2ndQuadrant, Ltd.
#               2006-2022 Mark Wong
#

usage() {
	echo "usage: `basename $0` -h"
	echo "usage: `basename $0` -i <directory> [-o <directory>] [-b devices]"
	echo "options:"
	echo "       -b <comma delimited list of block devices (default: all devices)>"
	echo "       -i <DBT-2 test output directory>"
}

error() {
	echo "ERROR: $@"
	exit 1
}

warning() {
	echo "WARNING: $@"
}

create_stat_page()
{
	local TITLE=$1
	local TAG=$2
	local DIR=$3
	local ODIR=$4

	mkdir -p $ODIR

	cat > ${ODIR}/index.rst << __EOF__
================================================================================
Database Test 2 $TITLE $TAG Charts
================================================================================

$(show_images $DIR $TAG)
__EOF__
}

links_index_metrics()
{
	INDEXMETRICS=`(cd ${INDIR}/db/indexes && ls *.png) \
			| sed -e "s/index-stat-.*-//" | sed -e "s/.png$//" | sort | uniq`

	for METRIC in $INDEXMETRICS; do
		echo -n "\`$METRIC <db/indexes/i_$METRIC/>\`__ "
	done
}

links_indexes()
{
	for INDEX in $(cat ${INDIR}/db/index-list.txt); do
		echo -n "\`$INDEX <db/indexes/${INDEX}/>\`_ "
	done
}

links_table_metrics()
{
	TABLEMETRICS=`(cd ${INDIR}/db/tables && ls *.png) | \
			sed -e "s/table-stat-.*-//" | sed -e "s/.png$//" | sort | uniq`

	for METRIC in $TABLEMETRICS; do
		echo -n "\`$METRIC <db/tables/t_${METRIC}/>\`_ "
	done
}

links_tables()
{
	for TABLE in $(cat $INDIR/db/table-list.txt); do
		echo -n "\`$TABLE <db/tables/${TABLE}/>\`_ "
	done
}

show_images()
{
	DIR=$1
	TAG=$2

	CHARTS=`(cd $DIR && find */ -name "sar-$TAG*.png")`
	for CHART in $CHARTS; do
		echo ".. image:: ../$CHART"
		echo "   :target: ../$CHART"
		echo "   :width: 100%"
		echo ""
	done
}

while getopts "b:hi:" opt; do
	case $opt in
	b)
		BLKDEVICES=${OPTARG}
		;;
	h)
		usage
		exit 1
		;;
	i)
		INDIR="$OPTARG"
		MIXLOG="${INDIR}/mix.log"
		OUTDIR="$INDIR"
		;;
	esac
done

SUMMARY="${INDIR}/summary.rst"
if [ ! -f "$SUMMARY" ]; then
	MIXFILE="${INDIR}/mix.log"
	dbt2-post-process $MIXFILE > $SUMMARY
	VERBOSE=1 dbt2-post-process $MIXFILE > ${INDIR}/detailed-summary.rst
fi

DBMS=`grep RDBMS $INDIR/readme.txt | cut -d " " -f 2`
if [ "x$DBMS" = "x" ]; then
	error "Could not determine what RDBMS used from results"
fi

DBNAME=`grep "Database Name" $INDIR/readme.txt | cut -d " " -f 3`
if [ "x$DBNAME" = "x" ]; then
	warning "Could not determine what the database name used from results"
fi

echo "Processing pidstat files..."
for PIDSTATFILE in $(find $INDIR -name pidstat.txt); do
	DIRNAME="$(dirname $PIDSTATFILE)"
	(cd $DIRNAME && dbt-process-pidstat $PIDSTATFILE)
done

echo "Generating transaction distribution charts..."
mkdir -p ${OUTDIR}/txn || exit 1
dbt-plot-transaction-distribution Delivery d ${MIXLOG} ${OUTDIR}/txn 1 \
		|| warning "Could not create Delivery response time distribution char"
dbt-plot-transaction-distribution "New Order" n ${MIXLOG} ${OUTDIR}/txn 2 \
		|| warning "Could not create New Order response time distribution char"
dbt-plot-transaction-distribution "Order Status" o ${MIXLOG} ${OUTDIR}/txn 3 \
		|| warning "Could not create Order Status response time distribution char"
dbt-plot-transaction-distribution "Payments" p ${MIXLOG} ${OUTDIR}/txn 4 \
		|| warning "Could not create Payments response time distribution char"
dbt-plot-transaction-distribution "Stock Level" s ${MIXLOG} ${OUTDIR}/txn 5 \
		|| warning "Could not create Stock Level response time distribution char"

mkdir -p ${OUTDIR}/db/sar || exit 1

echo "Generating sar io charts..."
for SARBLOCKDEVFILE in `find $INDIR -name sar-blockdev.csv`; do
	DIRNAME="$(dirname $SARBLOCKDEVFILE)/sar"
	mkdir -p $DIRNAME
	dbt-plot-sar-blockdev $SARBLOCKDEVFILE $DIRNAME \
			$BLKDEVICES \ > /dev/null 2>&1 \
			|| warning "Could not create sar blockdev charts"
done

echo "Generating memory charts..."
for SARMEMFILE in `find $INDIR -name sar-mem.csv`; do
	DIRNAME="$(dirname $SARMEMFILE)/sar"
	mkdir -p $DIRNAME
	dbt-plot-sar-mem -i $SARMEMFILE -o $DIRNAME > /dev/null 2>&1 \
			|| warning "Could not create sar mem charts from $SARMEMFILE"
done

echo "Generating processor utilization charts..."
for SARCPUFILE in `find $INDIR -name sar-cpu.csv`; do
	DIRNAME="$(dirname $SARCPUFILE)/sar"
	mkdir -p $DIRNAME
	dbt-plot-sar-cpu $SARCPUFILE $DIRNAME > /dev/null 2>&1 \
			|| warning "Could not create sar cpu charts from $SARCPUFILE"
done

echo "Generating swap charts..."
for SARSWAPFILE in `find $INDIR -name sar-swap.csv`; do
	DIRNAME="$(dirname $SARSWAPFILE)/sar"
	mkdir -p $DIRNAME
	dbt-plot-sar-swap $SARSWAPFILE $DIRNAME > /dev/null 2>&1 \
			|| warning "Could not create sar swap charts from $SARSWAPFILE"
done

echo "Generating network charts..."
for SARNETFILE in `find $INDIR -name sar-net.csv`; do
	DIRNAME="$(dirname $SARNETFILE)/sar"
	mkdir -p $DIRNAME
	dbt-plot-sar-net $SARNETFILE $DIRNAME > /dev/null 2>&1 \
			|| warning "Could not create sar net charts from $SARNETFILE"
done

echo "Generating transaction rate charts..."
dbt2-plot-transaction-rate ${MIXLOG} ${OUTDIR}/txn \
		|| warning "Could not create transaction rate charts"

TABLEDIR=$OUTDIR/db/tables
INDEXDIR=$OUTDIR/db/indexes
mkdir -p $TABLEDIR || exit 1
mkdir -p $INDEXDIR || exit 1

which dbt-${DBMS}-plot-database-stats > /dev/null 2>&1
if [ $? -eq 0 ]; then
	echo "Generating database statistics charts..."
	dbt-$DBMS-plot-database-stats -i ${INDIR}/db/pg_stat_databases.csv \
			-n $DBNAME -o $OUTDIR/db \
			|| warning "Issue creating at least some database stats charts"
fi
which dbt-${DBMS}-plot-table-stats > /dev/null 2>&1
if [ $? -eq 0 ]; then
	echo "Generating database table statistics charts..."
	for TABLENAME in `cat ${INDIR}/db/table-list.txt`; do
		dbt-$DBMS-plot-table-stats -i ${INDIR}/db/pg_stat_tables.csv \
				-n $TABLENAME -o $TABLEDIR > ${TABLEDIR}/r.log 2>&1 \
				|| warning "Issues creating at least some charts for table $TABLENAME"
	done
fi
which dbt-${DBMS}-plot-index-stats > /dev/null 2>&1
if [ $? -eq 0 ]; then
	echo "Generating database index statistics charts..."
	for INDEXNAME in `cat ${INDIR}/db/index-list.txt`; do
		dbt-$DBMS-plot-index-stats -i ${INDIR}/db/pg_stat_indexes.csv \
				-n $INDEXNAME -o $INDEXDIR > $INDEXDIR/r.log 2>&1 \
				|| warning "Issues creating at least some charts for index $INDEXNAME"
	done
fi

REPORTFILE="${OUTDIR}/report.rst"
cat > $REPORTFILE << __EOF__
======================
Database Test 2 Report
======================

**These results are not comparable to TPC Benchmark(TM) C Results.**

Summary
=======

$(head -n 1 ${INDIR}/readme.txt)

$(cat $SUMMARY)

Notes: $(head -n 2 ${INDIR}/readme.txt | tail -n 1)

Transaction Charts
==================

+------------+--------------------------------------+-----------------------------------+
|Transaction |            Response Time             |        Time Distribution          |
+============+======================================+===================================+
|Delivery    |.. image:: txn/d-transaction-rate.png |.. image:: txn/td-distribution.png |
|            |   :target: txn/d-transaction-rate.png|   :target: txn/td-distribution.png|
|            |   :width: 100%                       |   :width: 100%                    |
+------------+--------------------------------------+-----------------------------------+
|New Order   |.. image:: txn/n-transaction-rate.png |.. image:: txn/tn-distribution.png |
|            |   :target: txn/n-transaction-rate.png|   :target: txn/tn-distribution.png|
|            |   :width: 100%                       |   :width: 100%                    |
+------------+--------------------------------------+-----------------------------------+
|Order Status|.. image:: txn/o-transaction-rate.png |.. image:: txn/to-distribution.png |
|            |   :target: txn/o-transaction-rate.png|   :target: txn/to-distribution.png|
|            |   :width: 100%                       |   :width: 100%                    |
+------------+--------------------------------------+-----------------------------------+
|Payment     |.. image:: txn/p-transaction-rate.png |.. image:: txn/tp-distribution.png |
|            |   :target: txn/p-transaction-rate.png|   :target: txn/tp-distribution.png|
|            |   :width: 100%                       |   :width: 100%                    |
+------------+--------------------------------------+-----------------------------------+
|Stock Level |.. image:: txn/s-transaction-rate.png |.. image:: txn/ts-distribution.png |
|            |   :target: txn/s-transaction-rate.png|   :target: txn/ts-distribution.png|
|            |   :width: 100%                       |   :width: 100%                    |
+------------+--------------------------------------+-----------------------------------+

System Summary
==============

.. list-table::

   * - Driver System
     - $(cat ${INDIR}/driver/uname.txt 2> /dev/null)
     - \`CPU Charts <driver/cpu/>\`_ | \`Memory Charts <driver/mem/>\`_ | \`Blockdev Charts <driver/blockdev/>\`_ | \`Network Charts <driver/net/>\`_ | \`Swap Charts <driver/swap/>\`_
   * - Client System
     - $(cat ${INDIR}/client/uname.txt 2> /dev/null)
     - \`CPU Charts <client/cpu/>\`__ | \`Memory Charts <client/mem/>\`__ | \`Blockdev Charts <client/blockdev/>\`__ | \`Network Charts <client/net/>\`__ | \`Swap Charts <client/swap/>\`__
   * - Database System
     - $(cat ${INDIR}/db/uname.txt 2> /dev/null)
     - \`CPU Charts <db/cpu/>\`__ | \`Memory Charts <db/mem/>\`__ | \`Blockdev Charts <db/blockdev/>\`__ | \`Network Charts <db/net/>\`__ | \`Swap Charts <db/swap/>\`__ | \`Query Plans <db/plan0.txt>\`_

.. list-table::

   * - \`Database Stats Charts <db/stats/>\`_
     - 
   * - Database Table Stats Charts:
     - $(links_tables)
   * - Database Index Stats Charts:
     - $(links_indexes)
   * - Database Table Stats by Metrics:
     - $(links_table_metrics)
   * - Database Index Stats by Metrics:
     - $(links_index_metrics)

__EOF__

# Create additional HTML pages for operating system charts.

for SYSTEM in db client driver; do
	create_stat_page $SYSTEM cpu ${INDIR}/${SYSTEM} ${OUTDIR}/${SYSTEM}/cpu
	create_stat_page $SYSTEM mem ${INDIR}/${SYSTEM} ${OUTDIR}/${SYSTEM}/mem
	create_stat_page $SYSTEM blockdev ${INDIR}/${SYSTEM} \
			${OUTDIR}/${SYSTEM}/blockdev
	create_stat_page $SYSTEM net ${INDIR}/${SYSTEM} ${OUTDIR}/${SYSTEM}/net
	create_stat_page $SYSTEM swap ${INDIR}/${SYSTEM} ${OUTDIR}/${SYSTEM}/swap
done

# Create additional HTML pages for the database charts.

which dbt-${DBMS}-generate-db-report > /dev/null 2>&1
if [ $? -eq 0 ]; then
	dbt-${DBMS}-generate-db-report -t "Database Test 2" -i ${INDIR}/db \
			-o ${INDIR}/db/stats/index.rst
fi
which dbt-${DBMS}-generate-table-report > /dev/null 2>&1
if [ $? -eq 0 ]; then
	dbt-${DBMS}-generate-table-report -t "Database Test 2" \
			-i ${INDIR}/db/table-list.txt -o ${OUTDIR}/db/tables
fi
which dbt-${DBMS}-generate-index-report > /dev/null 2>&1
if [ $? -eq 0 ]; then
	dbt-${DBMS}-generate-index-report -t "Database Test 2" \
			-i ${INDIR}/db/index-list.txt -o ${OUTDIR}/db/indexes
fi

# Generate HTML and PDF files.

which rst2html5.py > /dev/null 2>&1
if [ $? -eq 0 ]; then
	# pandoc can't properly convert multi-cell table headings from rst but
	# Sphinx's rst2html can. Then pandoc can convert multi-cell table headings
	# from html to pdf.

	for RST in $(find $OUTDIR -name "*.rst"); do
		NAME="${RST%.*}"
		(cd $(dirname $RST) && \
				rst2html5.py $(basename $RST) ${NAME}.html 2> /dev/null) &
	done
	wait

	echo "Generated top level HTML reports:"
	ls -1v ${OUTDIR}/*.html
	echo ""

	# A pdf could be produced other ways, but I believe pandoc produces the most
	# minimally styled LaTeX looking document, as opposed to using rst2latex,
	# with default settings.
	which pandoc > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		(cd $OUTDIR && \
				pandoc -s report.html -f html -t pdf \ -o report.pdf \
						2> /dev/null)
		for HTML in $(find $OUTDIR -name "*.html"); do
			NAME="${HTML%.*}"
			(cd $(dirname $HTML) && \
					pandoc -s $(basename $HTML) -f html -t pdf -o ${NAME}.pdf \
							2> /dev/null) &
		done
		wait

		echo "Generated top level PDF reports:"
		ls -1v ${OUTDIR}/*.pdf
		echo ""
	else
		echo "pandoc required to generate pdf report"
		exit 1
	fi
else
	echo "rst2html5.py required to generate html report"
	exit 1
fi
