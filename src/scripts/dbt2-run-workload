#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-2 Authors
#

do_sleep()
{
	echo "Sleeping $1 seconds"
	sleep $1
}

make_directories()
{
	COMMAND=""
	HOST=${1}
	if [ -n "${HOST}" ]; then
		COMMAND="$SSH ${HOST}"
	fi
	${COMMAND} mkdir -p ${OUTPUT_DIR}
}

profile_collect()
{
	if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ]; then
		ts-profile -o "${DRIVER_OUTPUT_DIR}/$(hostname)/profile" sleep 10 &
	fi

	if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
		HOSTNAME=$(eval "${CLIENT_COMMAND} hostname")
		eval "${CLIENT_COMMAND} ts-profile -o ${CLIENT_OUTPUT_DIR}/${HOSTNAME}/profile sleep 10 &"
	fi

	if [ $DBAAS -eq 0 ]; then
		HOSTNAME=$(eval "${DB_COMMAND} hostname")
		eval "${DB_COMMAND} ts-profile -o ${DB_OUTPUT_DIR}/${HOSTNAME}/profile sleep 10 &"
	fi
}

profile_process()
{
	echo "processing profiling data..."
	if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ]; then
		ts-profile -o "${DRIVER_OUTPUT_DIR}/$(hostname)/profile" -p
	fi

	if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
		HOSTNAME=$(eval "${CLIENT_COMMAND} hostname")
		eval "${CLIENT_COMMAND} ts-profile -o ${CLIENT_OUTPUT_DIR}/${HOSTNAME}/profile -p"
	fi

	if [ $DBAAS -eq 0 ]; then
		HOSTNAME=$(eval "${DB_COMMAND} hostname")
		eval "${DB_COMMAND} ts-profile -o ${DB_OUTPUT_DIR}/${HOSTNAME}/profile -p"
	fi
}

stat_collection()
{
	ARGS=$1

	# If the this is a 1-tier test, system stats will be saved only in the db
	# directory.
	if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ]; then
		eval "ts-sysstat -o ${DRIVER_OUTPUT_DIR}/$(hostname)/sysstat ${ARGS} &"
	fi

	# Handle system statistics on the Client node, if remote.
	if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
		HOSTNAME=$(eval "${CLIENT_COMMAND} hostname")
		eval "${CLIENT_COMMAND} ts-sysstat -o ${CLIENT_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
	fi

	# Don't collect system stats from the database system if the database
	# is a service.
	HOSTNAME=$(eval "${DB_COMMAND} hostname")
	if [ $DBAAS -eq 0 ]; then
		eval "${DB_COMMAND} ts-sysstat -o ${DB_OUTPUT_DIR}/${HOSTNAME}/sysstat ${ARGS} &"
	fi
	eval "${DB_COMMAND} ts-${DBMS}-stat -o ${DB_OUTPUT_DIR}/${HOSTNAME}/dbstat ${DBSTATARGS} ${ARGS} &"
}

stop_processes() {
	if [ "$DRIVER3" = "1" ]; then
		killall dbt2-driver3
	else
		killall dbt2-driver
		if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
			eval "${CLIENT_COMMAND} killall dbt2-client"
		fi
	fi

	"dbt2-${DBMS}-stop-db"

	# Stop stat collection.
	stat_collection -s
}

trap 'echo "Test was interrupted by Control-C."; stop_processes' INT
trap 'echo "Test was interrupted. Got TERM signal."; stop_processes' TERM

usage()
{
	if [ "$1" != "" ]; then
		echo
		echo "error: $1"
	fi
	echo
	echo "`basename $0` is the DBT-2 workload runner"
	echo ""
	echo "Usage:"
	echo "  `basename $0` [OPTIONS]"
	echo
	echo "Generate options:"
	echo "  -a DBMS       dbms under test (pgsql)"
	echo "  -A            enable altered execution mode"
	echo "  -b #          Number of warehouses per process, default all specified by -w"
	if [ ! "x$DRIVER3" = "x1" ]; then
		echo "  -c #          number of database connection to open"
		echo "  -C ADDRESS    address of client system, default localhost"
	fi
	echo "  -d #          seconds of the test duration, after ramp up"
	echo "  -D NAME       name of the database"
	if [ "x$DRIVER3" = "x1" ]; then
		echo "  -F #          forks per processor, default 1"
	fi
	echo "  -h            this usage message"
	echo "  -H ADDRESS    address of database system, default localhost"
	echo "  -l PORT       database listening port number"
	echo "  -L #          limit the number of terminals emulated"
	echo "  -n            disable thinking and keying time"
	echo "  -o PATH       path to store test results"
	echo "  -s #          millisecond delay between thread creation"
	echo "  -t #          number of districts per warehouse, default 10"
	echo "  -u            run test as a privileged user"
	echo "  -w #          number of warehouses to use in the database"
	echo "  -y            database server is a service"
	echo "  -z COMMENT    comments to save for the test"
	echo
	echo "MySQL specific options:"
	echo "  -U USER        database user"
	echo "  -x PASSWORD    database password"
	echo
	echo "PostgreSQL specific options:"
	echo "  -p OPTIONS    GUC command line options to pass to postgres"
	echo
	echo "DBMS options are:"
	echo "  cockroach  CockroachDB"
	echo "  mysql      MySQL"
	echo "  pgsql      PostgreSQL"
	echo "  sqlite     SQLite"
}

validate_parameter()
{
	if [ "$2" != "$3" ]; then
		usage "wrong argument '$2' for parameter '-$1'"
		exit 1
	fi
}

SSH="ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

DB_HOSTNAME="localhost"
DB_PASSWORD=""
CLIENT_HOSTNAME=""
WORKING_DIR=""

DB_USER=${DBUSER}
DBAAS=0
FPP=1
PRIVILEGED=0
PROFILE=0
THREAD_STARTUP_DELAY=1000 # milliseconds
THREADS_PER_WAREHOUSE=10
USE_PGPOOL=0
DBNAME=${DBT2DBNAME}

while getopts "Aa:b:C:c:D:d:F:H:hi:L:l:no:p:rS:s:t:U:uw:x:yz:" opt; do
	case $opt in
	A)
		ALTERED_ARG="-altered 1"
		;;
	a)
		DBMS=${OPTARG}
		export DATABASE=${DBMS}
		;;
	b)
		# Number of warehouses per driver.
		W_CHUNK=${OPTARG}
		;;
	C)
		CLIENT_HOSTNAME=$OPTARG
		;;
	c)
		# Check for numeric value
		DBCON=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DBCON
		;;
	D)
		DBNAME=${OPTARG}
		;;
	d)
		DURATION=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DURATION
		;;
	F)
		FPP="$OPTARG"
		FPP_FLAG="-fpp $FPP"
		;;
	H)
		DB_HOSTNAME=${OPTARG}
		;;
	h)
		usage
		exit 1
		;;
	L)
		TERMINALS_LIMIT="$OPTARG"
		TERMINALS_LIMIT_ARG="-L $TERMINALS_LIMIT"
		;;
	l)
		DB_PORT=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $DB_PORT
		;;
	n)
		NO_THINK="-ktd 0 -ktn 0 -kto 0 -ktp 0 -kts 0 -ttd 0 -ttn 0 -tto 0 -ttp 0 -tts 0"
		;;
	o)
		OUTPUT_DIR=${OPTARG}
		;;
	p)
		DB_PARAMS="${OPTARG}"
		DB_PARAMS_ARG="-p \"${OPTARG}\""
		;;
	r)
		PROFILE=1
		;;
	S)
		SOCK_FILE=${OPTARG}
		SOCK_FILE_ARG="-t ${OPTARG}"
		;;
	s)
		THREAD_STARTUP_DELAY=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $THREAD_STARTUP_DELAY
		;;
	t)
		THREADS_PER_WAREHOUSE=`echo ${OPTARG} | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $THREADS_PER_WAREHOUSE
		;;
	u)
		PRIVILEGED=1
		;;
	U)
		DB_USER=${OPTARG}
		;;
	w)
		WAREHOUSES=`echo $OPTARG | egrep "^[0-9]+$"`
		validate_parameter $opt $OPTARG $WAREHOUSES
		;;
	x)
		DB_PASSWORD=${OPTARG}
		;;
	y)
		DBAAS=1
		;;
	z)
		COMMENT=$OPTARG
		;;
	esac
done

# If no client hostnames have been specified, set it to localhost.
if [ "x${CLIENT_HOSTNAME}" = "x" ]; then
	CLIENT_HOSTNAME="localhost"
fi

# If no chunking of warehouses per process is defined, assumed we want to run
# everything from one process.
if [ "x${W_CHUNK}" = "x" ]; then
	W_CHUNK=${WAREHOUSES}
fi

# Check parameters.

if [ "x${DBMS}" = "x" ]; then
	echo -n "specify which dbms system to test using -a "
	echo "<cockroach|mysql|pgsql|sqlite>"
	exit 1
fi

if [ "x${DBNAME}" = "x" ] && [ ! "x${DBMS}" = "xsqlite" ]; then
	echo "specify the database name using -D "
	echo "or by setting the DBT2DBNAME environment variable"
	exit 1
fi

if [ "x${DBCON}" = "x" ] && [ ! "x$DRIVER3" = "x1" ]; then
	echo "specify the number of database connections using -c #"
	exit 1
fi

if [ "x${DURATION}" = "x" ]; then
	echo "specify the duration of the test in seconds using -d #"
	exit 1
fi

if [ "x${WAREHOUSES}" = "x" ]; then
	echo "specify the number of warehouses using -w #"
	exit 1
fi

if [ "x${OUTPUT_DIR}" = "x" ]; then
	echo "specify the location for results, directory must not exist, using -o <path>"
	exit 1
fi

if [ -d "${OUTPUT_DIR}" ]; then
	echo "directory '${OUTPUT_DIR}' exists, stopping to prevent possible"
	echo "clobbering of data, please specify another -o location"
	exit 1
fi

if [ ${THREADS_PER_WAREHOUSE} -lt 1 ] || [ ${THREADS_PER_WAREHOUSE} -gt 1000 ];
then
	usage "-t value should be in range [1..1000]. Please specify correct value"
	exit 1
fi

if [ ! "x${DB_PORT}" = "x" ]; then
	if [ "x$DRIVER3" = "x1" ]; then
		DB_PORT_ARG="-P ${DB_PORT}"
	else
		DB_PORT_ARG="-l ${DB_PORT}"
	fi
fi

DBSTATARGS=""
case $DBMS in
pgsql)
	# Set extra argument variables.
	DBSTATARGS="-h $DB_HOSTNAME -d $DBNAME"
	;;
esac

CLIENT_OUTPUT_DIR=${OUTPUT_DIR}/client
DRIVER_OUTPUT_DIR=${OUTPUT_DIR}/driver
DB_OUTPUT_DIR=${OUTPUT_DIR}/db

SUMMARY="${OUTPUT_DIR}/summary.rst"

# Check if rsync exists on all systems and stop if not, required for collecting
# data from all systems.
if ! which rsync > /dev/null 2>&1; then
	echo "ERROR: rsync required on current system in order to retrieve results"
	exit 1
fi

if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
	CLIENT_COMMAND="$SSH $CLIENT_HOSTNAME"
	# Check for rsync on the client before continuing.
	if ! eval "${CLIENT_COMMAND} which rsync > /dev/null 2>&1"; then
		echo "ERROR: rsync required on client system in order to retrieve results"
		exit 1
	fi
else
	CLIENT_COMMAND=""
fi

if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ] && \
		[ $DBAAS -eq 0 ]; then
	DB_COMMAND="$SSH ${DB_HOSTNAME}"
	# Check for rsync on the client before continuing.
	if ! eval "${DB_COMMAND} which rsync > /dev/null 2>&1"; then
		echo "ERROR: rsync required on database system in order to retrieve results"
		exit 1
	fi
else
	DB_COMMAND=""
fi

#
# Create the directories we will need.
#
make_directories
mkdir -p ${DRIVER_OUTPUT_DIR}/`hostname`
if [ ! "x${CLIENT_HOSTNAME}" = "xlocalhost" ]; then
	make_directories $CLIENT_HOSTNAME
	HOSTNAME=$(eval "${CLIENT_COMMAND} hostname")
	eval "${CLIENT_COMMAND} mkdir -p ${CLIENT_OUTPUT_DIR}/${HOSTNAME}"
fi
if [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	#
	# Create direcotires on the database server if remote.
	#
	if [ $DBAAS -eq 0 ]; then
		make_directories ${DB_HOSTNAME}
		$SSH "$DB_HOSTNAME" -- mkdir -p "$DB_OUTPUT_DIR"
	fi
fi
mkdir -p ${DB_OUTPUT_DIR}

# Create a readme file in the output directory and date it.
date >> ${OUTPUT_DIR}/readme.txt
echo "$COMMENT" >> ${OUTPUT_DIR}/readme.txt
echo "Command line: $0 $@" >> ${OUTPUT_DIR}/readme.txt

# Output run information into the readme.txt.
echo "RDBMS: $DBMS" >> $OUTPUT_DIR/readme.txt
echo "Database Name: $DBNAME" >> $OUTPUT_DIR/readme.txt
echo "Database Scale Factor: $WAREHOUSES warehouses" >> $OUTPUT_DIR/readme.txt
echo "Test Duration: $DURATION seconds" >> ${OUTPUT_DIR}/readme.txt
echo "Database Connections: $DBCON" >> ${OUTPUT_DIR}/readme.txt

# Get any OS specific information, if this is a single tier configuration, then
# the OS parameters will be in the database output directory.
if [ -n ${DB_HOSTNAME} ] && [ ! "x${DB_HOSTNAME}" = "xlocalhost" ]; then
	dbt2-get-os-info -o "${DRIVER_OUTPUT_DIR}/$(hostname)"
	HOSTNAME=$(eval "${DB_COMMAND} hostname")
	eval "${DB_COMMAND} dbt2-get-os-info -o ${DB_OUTPUT_DIR}/${HOSTNAME}"
else
	dbt2-get-os-info -o "${DB_OUTPUT_DIR}/$(hostname)"
fi

if [ $PRIVILEGED -eq 1 ]; then
	eval "${DB_COMMAND} dbt2-${DBMS}-stop-db ${MISC_ARG}"
	if [ $? -ne 0 ]; then
		echo "cleaning up results..."
		rm -rf ${OUTPUT_DIR}
		exit 1
	fi
	eval "${DB_COMMAND} dbt2-${DBMS}-start-db ${DB_PARAMS_ARG} ${MISC_ARG} -o ${DB_OUTPUT_DIR}" || exit 1
fi

#
# Redisplay the test parameters.
#
echo "DBT-2 test for ${DBMS} started at $(date)..."
echo ""
echo "DATABASE SYSTEM: ${DB_HOSTNAME}"
if [ "${DBMS}" = "cockroach" ] || [ "${DBMS}" = "pgsql" ] || \
		[ "${DBMS}" = "mysql" ]; then
	echo "DATABASE NAME: ${DBNAME}"
fi

#
# Build up the client command line arguments.
#

CLIENT_COMMAND_ARGS="-a $DBMS"

if [ -n "${DB_USER}" ]; then
	echo "DATABASE USER: ${DB_USER}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -u ${DB_USER}"
fi

if [ -n "${DB_PASSWORD}" ]; then
	echo "DATABASE PASSWORD: *******"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -a ${DB_PASSWORD}"
fi

if [ -n "${DB_SOCKET}" ]; then
	echo "DATABASE SOCKET: ${DB_SOCKET}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -t ${DB_SOCKET}"
fi

if [ -n "${DB_PORT}" ]; then
	echo "DATABASE PORT: ${DB_PORT}"
	CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} ${DB_PORT_ARG}"
fi

OPTION1=`expr $WAREHOUSES \* $THREADS_PER_WAREHOUSE`
THREADS=$OPTION1
if [ ! "x$TERMINALS_LIMIT" = "x" ]; then
	OPTION2=$TERMINALS_LIMIT
	if [ $OPTION1 -lt $OPTION2 ]; then
		THREADS=$OPTION1
	else
		THREADS=$OPTION2
	fi
fi
echo "DATABASE CONNECTIONS: ${DBCON}"
echo "TERMINAL THREADS: ${THREADS}"
echo "TERMINALS PER WAREHOUSE: ${THREADS_PER_WAREHOUSE}"
echo "TERMINAL CAP: $TERMINALS_LIMIT"
echo "WAREHOUSES PER DRIVER/CLIENT PAIR: $W_CHUNK"
echo "SCALE FACTOR (WAREHOUSES): ${WAREHOUSES}"
echo "DURATION OF TEST (in sec): ${DURATION}"
echo ""

#
# Start the client.
#
echo "Stage 1. Starting up client..."
if [ ! "x$DRIVER3" = "x1" ]; then
	echo "database connection starting every $THREAD_STARTUP_DELAY milliseconds"
	if [ ${DBMS} = "cockroach" ]; then
		CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${DB_HOSTNAME} -b ${DBNAME}"
	elif [ ${DBMS} = "mysql" ]; then
		CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${DBNAME}"
		CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} ${SOCK_FILE_ARG} -u root"
		CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -h ${DB_HOSTNAME}"
	elif [ ${DBMS} = "pgsql" ]; then
		if [ ${USE_PGPOOL} -eq 1 ]; then
			echo "Starting pgpool..."
			pgpool -f ${DIR}/pgsql/pgpool.conf
			TMP_DB_HOSTNAME="localhost"
		else
			TMP_DB_HOSTNAME=${DB_HOSTNAME}
		fi
		CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${TMP_DB_HOSTNAME} -b ${DBNAME}"
	elif [ ${DBMS} = "sqlite" ]; then
		CLIENT_COMMAND_ARGS="${CLIENT_COMMAND_ARGS} -d ${DB_PARAMS}"
	fi
	CLIENT_COMMAND_ARGS="$CLIENT_COMMAND_ARGS -f -c $DBCON -s $THREAD_STARTUP_DELAY"
	END=0
	START=1

	#
	# Count of the number of clients to run.
	#
	SEG=0
	PORT=30000
	while [ ${END} -lt ${WAREHOUSES} ]; do
		START=`expr ${END} + 1`
		END=`expr ${START} + ${W_CHUNK}`
		END=`expr ${END} - 1`
		SEG=`expr ${SEG} + 1`

		if [ ${END} -gt ${WAREHOUSES} ]; then
			END=${WAREHOUSES}
		fi

		HOSTNAME=`$CLIENT_COMMAND hostname`
		CPDIR="${CLIENT_OUTPUT_DIR}/${HOSTNAME}"
		mkdir -p ${CPDIR}

		CDIR="${CLIENT_OUTPUT_DIR}/${HOSTNAME}.${SEG}"
		eval "${CLIENT_COMMAND} mkdir -p ${CDIR}"

		CARGS="${CLIENT_COMMAND_ARGS} -p ${PORT} -o ${CDIR}"
		if [ ! "x$DRIVER3" = "x1" ]; then
			eval "${CLIENT_COMMAND} dbt2-client ${CARGS} > ${CPDIR}/client-${SEG}.txt 2>&1 &"
		fi

		PORT=`expr ${PORT} + 1`
	done

	# Sleep long enough for all the client database connections to be established.
	CLIENT_RAMPUP_TIME=$DBCON
	CLIENT_RAMPUP_TIME=`expr $CLIENT_RAMPUP_TIME \* $THREAD_STARTUP_DELAY`
	CLIENT_RAMPUP_TIME=`expr $CLIENT_RAMPUP_TIME / 1000`
	CLIENT_RAMPUP_TIME=`expr $CLIENT_RAMPUP_TIME + 1`
	do_sleep $CLIENT_RAMPUP_TIME
else
	echo "***skipping***"
fi

# Start collecting data before we start the test.

# Calculate how many terminals are being emulated.
OPTION1=`expr $W_CHUNK + 1`
OPTION1=`expr $OPTION1 \* $THREADS_PER_WAREHOUSE`
DRIVER_RAMPUP_TIME=$OPTION1
if [ ! "x$TERMINALS_LIMIT" = "x" ]; then
	OPTION2=$TERMINALS_LIMIT
	if [ $OPTION1 -lt $OPTION2 ]; then
		DRIVER_RAMPUP_TIME=$OPTION1
	else
		DRIVER_RAMPUP_TIME=$OPTION2
	fi
fi
if [ "x$DRIVER3" = "x1" ]; then
	DRIVER_RAMPUP_TIME=$(( ($(nproc) * $FPP) - 1 ))
fi
DRIVER_RAMPUP_TIME=`expr $DRIVER_RAMPUP_TIME \* $THREAD_STARTUP_DELAY`
DRIVER_RAMPUP_TIME=`expr $DRIVER_RAMPUP_TIME / 1000`
TOTAL_RUN_TIME=`expr $DRIVER_RAMPUP_TIME + $DURATION`
SAMPLE_LENGTH=60
ITERATIONS=`expr $TOTAL_RUN_TIME / $SAMPLE_LENGTH`
ITERATIONS=`expr ${ITERATIONS} + 1`

stat_collection

if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
	HOSTNAME=$(eval "${CLIENT_COMMAND} hostname")
	eval "${CLIENT_COMMAND} dbt2-get-os-info -o ${CLIENT_OUTPUT_DIR}/${HOSTNAME}"
fi

echo "collecting database statistics..."
HOSTNAME=$(eval "${DB_COMMAND} hostname")
eval "$DB_COMMAND mkdir -p ${DB_OUTPUT_DIR}/${HOSTNAME}"
if [ $DBAAS -eq 0 ]; then
	eval "${DB_COMMAND} dbt2-${DBMS}-plans -d ${DBNAME} -o ${DB_OUTPUT_DIR}/${HOSTNAME}/plan0.txt"
fi

# Start the driver.
echo ''
echo "Stage 2. Starting up driver..."
echo "thread starting every $THREAD_STARTUP_DELAY milliseconds"

END=0
START=1
#
# Count of the number of drivers run.
#
SEG=0
PORT=30000
while [ ${END} -lt ${WAREHOUSES} ]; do
	START=`expr ${END} + 1`
	END=`expr ${START} + ${W_CHUNK}`
	END=`expr ${END} - 1`
	SEG=`expr ${SEG} + 1`

	if [ ${END} -gt ${WAREHOUSES} ]; then
		END=${WAREHOUSES}
	fi

	DDIR="${DRIVER_OUTPUT_DIR}/`hostname`.${SEG}"
	mkdir -p ${DDIR}
	DRIVER_COMMAND_ARGS="-l $DURATION -wmin $START"
	DRIVER_COMMAND_ARGS="$DRIVER_COMMAND_ARGS -wmax $END -w $WAREHOUSES"
	DRIVER_COMMAND_ARGS="$DRIVER_COMMAND_ARGS -sleep $THREAD_STARTUP_DELAY"
	DRIVER_COMMAND_ARGS="$DRIVER_COMMAND_ARGS -outdir $DDIR"
	DRIVER_COMMAND_ARGS="$DRIVER_COMMAND_ARGS -tpw $THREADS_PER_WAREHOUSE"
	DRIVER_COMMAND_ARGS="$DRIVER_COMMAND_ARGS $NO_THINK $TERMINALS_LIMIT_ARG"
	DRIVER_COMMAND_ARGS="$DRIVER_COMMAND_ARGS $ALTERED_ARG $DB_PORT_ARG"
	if [ "x$DRIVER3" = "x1" ]; then
		echo "***experimental driver 3 active***"
		DHNARG="-b $DBNAME -d $DB_HOSTNAME"
		dbt2-driver3 ${DRIVER_COMMAND_ARGS} -a $DBMS $DHNARG $FPP_FLAG > \
				${DRIVER_OUTPUT_DIR}/`hostname`/driver-${SEG}.txt 2>&1 \
				|| exit 1 &
	else
		dbt2-driver -d $CLIENT_HOSTNAME -p $PORT ${DRIVER_COMMAND_ARGS} > \
				${DRIVER_OUTPUT_DIR}/`hostname`/driver-${SEG}.txt 2>&1 \
				|| exit 1 &
	fi
	DRIVER_PIDLIST="$DRIVER_PIDLIST $!"
	PORT=`expr ${PORT} + 1`
done

echo -n "estimated rampup time: "
do_sleep $DRIVER_RAMPUP_TIME
echo "estimated rampup time has elapsed"

if [ "${PROFILE}" -eq 1 ]; then
	profile_collect &
fi

# Sleep for the duration of the run.
echo -n "estimated steady state time: "
do_sleep $DURATION

# Stop stats collection.
stat_collection -s

echo ''
echo "Stage 3. Processing of results..."

# TODO: Make the tear down of the clients and drivers more graceful than
# blowing away the client and waiting for drivers to stop complaining about
# that it disappeared.

if [ ! "x$DRIVER3" = "x1" ]; then
	# Client doesn't go away by itself like the driver does, so kill it.
	echo "Killing client..."
	eval "${CLIENT_COMMAND} killall -q dbt2-client > /dev/null 2>&1 &"
fi

# Make sure all the drivers have exited, so all the mix files have flushed to
# disk before continuing processing.  Can't count on all of the sleeps to be
# precise...
wait $DRIVER_PIDLIST

cat > $SUMMARY << __EOF__ &
$(find $DRIVER_OUTPUT_DIR -name 'mix*.log' | xargs dbt2-post-process)
__EOF__
cat >${OUTPUT_DIR}/detailed-summary.rst << __EOF__ &
$(find $DRIVER_OUTPUT_DIR -name 'mix*.log' | VERBOSE=1 xargs dbt2-post-process)
__EOF__
wait

if [ $PRIVILEGED -eq 1 ]; then
	eval "${DB_COMMAND} dbt2-${DBMS}-stop-db ${MISC_ARG}"
	if [ ${DBMS} = "pgsql" ]; then
		if [ ${USE_PGPOOL} -eq 1 ]; then
			pgpool -f ${DIR}/pgsql/pgpool.conf stop
		fi
	fi
fi

if [ "${PROFILE}" -eq 1 ]; then
	profile_process
fi

# Retrieve test data from all remote systems.
if [ -n "${DB_HOSTNAME}" ] && [ ! "${DB_HOSTNAME}" = "localhost" ]; then
	# If a database system is specified, rsync all the logs back to the driver
	# system after creating the sar csv data.  There will only be a sar output
	# file if the database is on a separate system.
	if [ $DBAAS -eq 0 ]; then
		rsync -a -e "$SSH" --delete "${DB_HOSTNAME}:${DB_OUTPUT_DIR}/" \
				"${DB_OUTPUT_DIR}/"
	fi
fi

if [ ! "${CLIENT_HOSTNAME}" = "localhost" ]; then
	HOSTNAME=$(eval "${CLIENT_COMMAND} hostname")
	rsync -a -e "${SSH}" --delete "${CLIENT_HOSTNAME}:${CLIENT_OUTPUT_DIR}/" \
			"${CLIENT_OUTPUT_DIR}/"
fi

echo "Test completed."
echo "Results are in: ${OUTPUT_DIR}"
echo

cat $SUMMARY
