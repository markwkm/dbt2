#!/bin/sh
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-2 Authors
#

if [ -z ${DBT2DBNAME} ]; then
    echo "DBT2DBNAME not defined."
    exit 1
fi

AUTOSCALE=0
USE_TABLESPACES=0
while getopts "l:Ptr:s:" OPT; do
	case ${OPT} in
	l)
		PORT=${OPTARG}
		;;
	P)
		PARTITION_CLAUSE_DISTRICT="PARTITION BY RANGE (d_w_id)"
		PARTITION_CLAUSE_CUSTOMER="PARTITION BY RANGE (c_w_id)"
		PARTITION_CLAUSE_HISTORY="PARTITION BY RANGE (h_c_w_id)"
		PARTITION_CLAUSE_NEW_ORDER="PARTITION BY RANGE (no_w_id)"
		PARTITION_CLAUSE_ORDER_LINE="PARTITION BY RANGE (ol_w_id)"
		PARTITION_CLAUSE_ORDERS="PARTITION BY RANGE (o_w_id)"
		PARTITION_CLAUSE_STOCK="PARTITION BY RANGE (s_w_id)"
		PARTITION_CLAUSE_WAREHOUSE="PARTITION BY RANGE (w_id)"
		;;
	r)
		W_RANGE=${OPTARG}
		;;
	s)
		W_SHARDS=${OPTARG}
		;;
	t)
		USE_TABLESPACES=1
		;;
	esac
done

if [ ! "x${PARTITION_CLAUSE_DISTRICT}" = "x" ]; then
	if [ "x${W_RANGE}" = "x" ] || [ "x${W_SHARDS}" = "x" ]; then
		echo "specify -s <shards> and -r <range>"
		exit 1
	fi
	AUTOSCALE=1
fi

if [ ! "x${PORT}" = "x" ]; then
	PORTARG="-p ${PORT}"
fi
PSQL="psql -X ${PORTARG} -e -d ${DBT2DBNAME}"

if [ ${USE_TABLESPACES} -eq 1 ]; then
	if [ "x${DBT2TSDIR}" = "x" ]; then
		echo "DBT2TSDIR is not set."
		exit 1
	fi
	TS_WAREHOUSE_DIR=${DBT2TSDIR}/warehouse/ts
	TS_DISTRICT_DIR=${DBT2TSDIR}/district/ts
	TS_CUSTOMER_DIR=${DBT2TSDIR}/customer/ts
	TS_HISTORY_DIR=${DBT2TSDIR}/history/ts
	TS_NEW_ORDER_DIR=${DBT2TSDIR}/new_order/ts
	TS_ORDERS_DIR=${DBT2TSDIR}/orders/ts
	TS_ORDER_LINE_DIR=${DBT2TSDIR}/order_line/ts
	TS_ITEM_DIR=${DBT2TSDIR}/item/ts
	TS_STOCK_DIR=${DBT2TSDIR}/stock/ts

	#
	# Creating 'ts' subdirectories because PostgreSQL doesn't like that
	# 'lost+found' directory if a device was mounted at
	# '${DBT2TSDIR}/warehouse'.
	#
	mkdir -p ${TS_WAREHOUSE_DIR} || exit 1
	mkdir -p ${TS_DISTRICT_DIR} || exit 1
	mkdir -p ${TS_CUSTOMER_DIR} || exit 1
	mkdir -p ${TS_HISTORY_DIR} || exit 1
	mkdir -p ${TS_NEW_ORDER_DIR} || exit 1
	mkdir -p ${TS_ORDERS_DIR} || exit 1
	mkdir -p ${TS_ORDER_LINE_DIR} || exit 1
	mkdir -p ${TS_ITEM_DIR} || exit 1
	mkdir -p ${TS_STOCK_DIR} || exit 1

	TS_WAREHOUSE="TABLESPACE dbt2_warehouse"
	TS_DISTRICT="TABLESPACE dbt2_district"
	TS_CUSTOMER="TABLESPACE dbt2_customer"
	TS_HISTORY="TABLESPACE dbt2_history"
	TS_NEW_ORDER="TABLESPACE dbt2_new_order"
	TS_ORDERS="TABLESPACE dbt2_orders"
	TS_ORDER_LINE="TABLESPACE dbt2_order_line"
	TS_ITEM="TABLESPACE dbt2_item"
	TS_STOCK="TABLESPACE dbt2_stock"

	#
	# Don't need to '|| exit 1' in case the tablespaces do not already exist.
	#
	${PSQL} -c "DROP ${TS_WAREHOUSE};"
	${PSQL} -c "CREATE ${TS_WAREHOUSE} LOCATION '${TS_WAREHOUSE_DIR}';"
	${PSQL} -c "DROP ${TS_DISTRICT};"
	${PSQL} -c "CREATE ${TS_DISTRICT} LOCATION '${TS_DISTRICT_DIR}';"
	${PSQL} -c "DROP ${TS_CUSTOMER};"
	${PSQL} -c "CREATE ${TS_CUSTOMER} LOCATION '${TS_CUSTOMER_DIR}';"
	${PSQL} -c "DROP ${TS_HISTORY};"
	${PSQL} -c "CREATE ${TS_HISTORY} LOCATION '${TS_HISTORY_DIR}';"
	${PSQL} -c "DROP ${TS_NEW_ORDER};"
	${PSQL} -c "CREATE ${TS_NEW_ORDER} LOCATION '${TS_NEW_ORDER_DIR}';"
	${PSQL} -c "DROP ${TS_ORDERS};"
	${PSQL} -c "CREATE ${TS_ORDERS} LOCATION '${TS_ORDERS_DIR}';"
	${PSQL} -c "DROP ${TS_ORDER_LINE};"
	${PSQL} -c "CREATE ${TS_ORDER_LINE} LOCATION '${TS_ORDER_LINE_DIR}';"
	${PSQL} -c "DROP ${TS_ITEM};"
	${PSQL} -c "CREATE ${TS_ITEM} LOCATION '${TS_ITEM_DIR}';"
	${PSQL} -c "DROP ${TS_STOCK};"
	${PSQL} -c "CREATE ${TS_STOCK} LOCATION '${TS_STOCK_DIR}';"
fi

${PSQL} -c "
CREATE TABLE warehouse (
    w_id INTEGER,
    w_name VARCHAR(10),
    w_street_1 VARCHAR(20),
    w_street_2 VARCHAR(20),
    w_city VARCHAR(20),
    w_state char(2),
    w_zip char(9),
    w_tax REAL,
    w_ytd NUMERIC(24, 12))
	${PARTITION_CLAUSE_WAREHOUSE}
    ${TS_WAREHOUSE};
" || exit 1

${PSQL} -c "
CREATE TABLE district (
    d_id INTEGER,
    d_w_id INTEGER,
    d_name VARCHAR(10),
    d_street_1 VARCHAR(20),
    d_street_2 VARCHAR(20),
    d_city VARCHAR(20),
    d_state char(2),
    d_zip char(9),
    d_tax REAL,
    d_ytd NUMERIC(24, 12),
    d_next_o_id INTEGER)
	${PARTITION_CLAUSE_DISTRICT}
    ${TS_DISTRICT};
" || exit 1

${PSQL} -c "
CREATE TABLE customer (
    c_id INTEGER,
    c_d_id INTEGER,
    c_w_id INTEGER,
    c_first VARCHAR(16),
    c_middle char(2),
    c_last VARCHAR(16),
    c_street_1 VARCHAR(20),
    c_street_2 VARCHAR(20),
    c_city VARCHAR(20),
    c_state char(2),
    c_zip char(9),
    c_phone char(16),
    c_since TIMESTAMP,
    c_credit char(2),
    c_credit_lim NUMERIC(24, 12),
    c_discount REAL,
    c_balance NUMERIC(24, 12),
    c_ytd_payment NUMERIC(24, 12),
    c_payment_cnt REAL,
    c_delivery_cnt REAL,
    c_data VARCHAR(500))
	${PARTITION_CLAUSE_CUSTOMER}
    ${TS_CUSTOMER};
" || exit 1

${PSQL} -c "
CREATE TABLE history (
    h_c_id INTEGER,
    h_c_d_id INTEGER,
    h_c_w_id INTEGER,
    h_d_id INTEGER,
    h_w_id INTEGER,
    h_date TIMESTAMP,
    h_amount REAL,
    h_data VARCHAR(24) )
	${PARTITION_CLAUSE_HISTORY}
    ${TS_HISTORY};
" || exit 1

${PSQL} -c "
CREATE TABLE new_order (
    no_o_id INTEGER,
    no_d_id INTEGER,
    no_w_id INTEGER)
	${PARTITION_CLAUSE_NEW_ORDER}
    ${TS_NEW_ORDER};
" || exit 1

${PSQL} -c "
CREATE TABLE orders (
    o_id INTEGER,
    o_d_id INTEGER,
    o_w_id INTEGER,
    o_c_id INTEGER,
    o_entry_d TIMESTAMP,
    o_carrier_id INTEGER,
    o_ol_cnt INTEGER,
    o_all_local REAL)
	${PARTITION_CLAUSE_ORDERS}
    ${TS_ORDERS};
" || exit 1

${PSQL} -c "
CREATE TABLE order_line (
    ol_o_id INTEGER,
    ol_d_id INTEGER,
    ol_w_id INTEGER,
    ol_number INTEGER,
    ol_i_id INTEGER,
    ol_supply_w_id INTEGER,
    ol_delivery_d TIMESTAMP,
    ol_quantity REAL,
    ol_amount REAL,
    ol_dist_info VARCHAR(24))
	${PARTITION_CLAUSE_ORDER_LINE}
    ${TS_ORDER_LINE};
" || exit 1

${PSQL} -c "
CREATE TABLE item (
    i_id INTEGER,
    i_im_id INTEGER,
    i_name VARCHAR(24),
    i_price REAL,
    i_data VARCHAR(50))
    ${TS_ITEM};
" || exit 1

${PSQL} -c "
CREATE TABLE stock (
    s_i_id INTEGER,
    s_w_id INTEGER,
    s_quantity REAL,
    s_dist_01 VARCHAR(24),
    s_dist_02 VARCHAR(24),
    s_dist_03 VARCHAR(24),
    s_dist_04 VARCHAR(24),
    s_dist_05 VARCHAR(24),
    s_dist_06 VARCHAR(24),
    s_dist_07 VARCHAR(24),
    s_dist_08 VARCHAR(24),
    s_dist_09 VARCHAR(24),
    s_dist_10 VARCHAR(24),
    s_ytd NUMERIC(16, 8),
    s_order_cnt REAL,
    s_remote_cnt REAL,
    s_data VARCHAR(50))
	${PARTITION_CLAUSE_STOCK}
    ${TS_STOCK};
" || exit 1

${PSQL} -c "
ALTER TABLE warehouse
ADD CONSTRAINT pk_warehouse
PRIMARY KEY (w_id) ${TS_PK_WAREHOUSE};
" || exit 1 &

${PSQL} -c "
ALTER TABLE district
ADD CONSTRAINT pk_district
PRIMARY KEY (d_w_id, d_id) ${TS_PK_DISTRICT};
" || exit 1 &

${PSQL} -c "
ALTER TABLE customer
ADD CONSTRAINT pk_customer
PRIMARY KEY (c_w_id, c_d_id, c_id) ${TS_PK_CUSTOMER};
" || exit 1 &

${PSQL} -c "
ALTER TABLE new_order
ADD CONSTRAINT pk_new_order
PRIMARY KEY (no_w_id, no_d_id, no_o_id) ${TS_PK_NEW_ORDER};
" || exit 1 &

${PSQL} -c "
ALTER TABLE orders
ADD CONSTRAINT pk_orders
PRIMARY KEY (o_w_id, o_d_id, o_id) ${TS_PK_ORDERS};
" || exit 1 &

${PSQL} -c "
ALTER TABLE order_line
ADD CONSTRAINT pk_order_line
PRIMARY KEY (ol_w_id, ol_d_id, ol_o_id, ol_number) ${TS_PK_ORDER_LINE};
" || exit 1 &

${PSQL} -c "
ALTER TABLE item
ADD CONSTRAINT pk_item
PRIMARY KEY (i_id) ${TS_PK_ITEM};
" || exit 1 &

${PSQL} -c "
ALTER TABLE stock
ADD CONSTRAINT pk_stock
PRIMARY KEY (s_w_id, s_i_id, s_quantity) ${TS_PK_STOCK};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_orders
ON orders (o_w_id, o_d_id, o_c_id) ${TS_INDEX1};
" || exit 1 &

${PSQL} -c "
CREATE INDEX i_customer
ON customer (c_w_id, c_d_id, c_last, c_first, c_id) ${TS_INDEX2};

" || exit 1 &

if [ $AUTOSCALE -eq 1 ]; then
	# Need some time for the DDL of the indexes to be created before alterting
	# the tables.
	sleep 10

	${PSQL} -c "
ALTER TABLE warehouse REPLICA IDENTITY USING INDEX pk_warehouse;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'warehouse',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(w_id) IS NULL THEN 0 ELSE max(w_id) END from public.warehouse',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
ALTER TABLE district REPLICA IDENTITY USING INDEX pk_district;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'district',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(d_w_id) IS NULL THEN 0 ELSE max(d_w_id) END from public.district',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
ALTER TABLE customer REPLICA IDENTITY USING INDEX pk_customer;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'customer',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(c_w_id) IS NULL THEN 0 ELSE max(c_w_id) END from public.customer',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'history',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(h_c_w_id) IS NULL THEN 0 ELSE max(h_c_w_id) END from public.history',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
ALTER TABLE new_order REPLICA IDENTITY USING INDEX pk_new_order;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'new_order',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(no_w_id) IS NULL THEN 0 ELSE max(no_w_id) END from public.new_order',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
ALTER TABLE orders REPLICA IDENTITY USING INDEX pk_orders;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'orders',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(o_w_id) IS NULL THEN 0 ELSE max(o_w_id) END from public.orders',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
ALTER TABLE order_line REPLICA IDENTITY USING INDEX pk_order_line;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'order_line',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(ol_w_id) IS NULL THEN 0 ELSE max(ol_w_id) END from public.order_line',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1

	${PSQL} -c "
ALTER TABLE stock REPLICA IDENTITY USING INDEX pk_stock;
"|| exit 1

	${PSQL} -c "
SELECT bdr.autoscale(
  'stock',
  '${W_RANGE}',
  partition_autocreate_expression := 'SELECT CASE WHEN max(s_w_id) IS NULL THEN 0 ELSE max(s_w_id) END from public.stock',
  minimum_advance_partitions := ${W_SHARDS},
  maximum_advance_partitions := ${W_SHARDS},
  partition_initial_lowerbound := '1',
  number_of_copies := 1
);
" || exit 1
fi

exit 0
